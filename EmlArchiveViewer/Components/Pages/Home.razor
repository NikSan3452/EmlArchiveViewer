@page "/"

@using Variant = MudBlazor.Variant
@inject EmlArchiveService ArchiveService
@inject ViewerStateService ViewerStateService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<PageTitle>Загрузка архива</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-8">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h5" Align="Align.Center">Просмотр EML архива</MudText>

            <MudTextField @bind-Value="_archivePath"
                          Label="Путь к архиву"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Required="true"
                          @onkeyup="HandleKeyPress"/>

            @if (_isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Value="_progressValue" Class="my-2"/>
                <MudText Align="Align.Center">@_progressStatus</MudText>
            }

            <MudButton OnClick="@(() => LoadArchiveAsync())"
                       Disabled="@(string.IsNullOrWhiteSpace(_archivePath) || _isLoading)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       Size="Size.Large"
                       Class="mt-4">
                @(_isLoading ? "Загрузка..." : "Загрузить")
            </MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private string _archivePath = "D:\\Downloads";
    private bool _isLoading;
    private double _progressValue;
    private string _progressStatus = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _archivePath = await LocalStorage.GetItemAsync<string>("archivePath") ?? "D:\\Downloads";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            if (!string.IsNullOrWhiteSpace(_archivePath) && !_isLoading)
            {
                await LoadArchiveAsync();
            }
        }
    }

    private async Task LoadArchiveAsync()
    {
        _isLoading = true;
        _progressValue = 0;
        _progressStatus = "Подготовка...";
        await InvokeAsync(StateHasChanged);

        try
        {
            await LocalStorage.SetItemAsync("archivePath", _archivePath);

            var (finalHeaders, detectedUserEmail) = await ArchiveService.LoadArchiveAsync(_archivePath, (progress, status) =>
            {
                _progressValue = progress;
                _progressStatus = status;
                InvokeAsync(StateHasChanged);
            });

            if (!finalHeaders.Any())
            {
                Snackbar.Add("В указанной директории не найдено .eml файлов.", Severity.Warning);
                _isLoading = false;
                return;
            }

            ViewerStateService.AllHeaders = finalHeaders;
            ViewerStateService.UserEmail = detectedUserEmail;

            var userName = detectedUserEmail.Split('@').FirstOrDefault() ?? "default";
            NavigationManager.NavigateTo($"/{userName}/emails");
        }
        catch (DirectoryNotFoundException)
        {
            Snackbar.Add("Ошибка: Указанная директория не найдена.", Severity.Error);
            _isLoading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Произошла непредвиденная ошибка: {ex.Message}", Severity.Error);
            _isLoading = false;
        }
    }

}