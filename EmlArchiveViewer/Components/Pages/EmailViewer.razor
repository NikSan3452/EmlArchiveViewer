@page "/{User}/emails"
@using SortDirection = MudBlazor.SortDirection
@inject ViewerStateService ViewerStateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Письма - @User</PageTitle>

@if (_allMessages.Any())
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">

        <MudPaper Elevation="5">
            <RadzenSplitter style="height: 100%;">
                <RadzenSplitterPane Size="10%" Min="150px">
                    <MudPaper Elevation="0" Class="pa-2" Style="height: 100%; padding: 10px">
                        <MudList @bind-SelectedValue="_selectedMailbox">
                            <MudListItem Value="@MailboxType.Inbox" Text="Входящие"/>
                            <MudListItem Value="@MailboxType.Sent" Text="Исходящие"/>
                        </MudList>
                    </MudPaper>
                </RadzenSplitterPane>

                <RadzenSplitterPane Size="40%" Min="300px">
                    <MudPaper Elevation="0" Style="height: 100%; padding: 10px; box-sizing: border-box;">
                        <MudText Class="pb-2" Typo="Typo.subtitle2">Всего писем: @_allMessages.Count</MudText>
                        <MudTable Items="CurrentMessages"
                                  FixedHeader="true"
                                  Height="90vh"
                                  Dense="true"
                                  Hover="true"
                                  @bind-SelectedItem="_selectedMessage" Breakpoint="Breakpoint.None"
                                  Style="cursor: pointer;">
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EmailMessage, object>(x => x.From)">
                                        Отправитель
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EmailMessage, object>(x => x.Subject)">
                                        Тема
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel InitialDirection="SortDirection.Descending"
                                                       SortBy="new Func<EmailMessage, object>(x => x.Date)">Дата
                                    </MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Отправитель">@context.From</MudTd>
                                <MudTd DataLabel="Тема">@context.Subject</MudTd>
                                <MudTd DataLabel="Дата">@context.Date.ToString("g")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </RadzenSplitterPane>

                <RadzenSplitterPane Size="50%" Min="300px">
                    <MudPaper Elevation="0"
                              Style="height: 100%; overflow-y: auto; padding: 10px; box-sizing: border-box;">
                        @if (_selectedMessage != null)
                        {
                            <MailView Message="_selectedMessage"
                                      OnDownloadAttachment="DownloadAttachment"
                                      style="height: 100%;"/>
                        }
                        else
                        {
                            <MudText Align="Align.Center" Class="pa-10">Выберите письмо для просмотра</MudText>
                        }
                    </MudPaper>
                </RadzenSplitterPane>

            </RadzenSplitter>
        </MudPaper>

    </MudContainer>
}
else
{
    <MudText Align="Align.Center" Class="mt-16">Нет данных для отображения.
        <MudLink Href="/">Вернуться на главную</MudLink>
    </MudText>
}

@code {
    [Parameter] public string User { get; set; } = string.Empty;

    private List<EmailMessage> _allMessages = [];
    private EmailMessage? _selectedMessage;
    private MailboxType _selectedMailbox = MailboxType.Inbox;

    protected override void OnInitialized()
    {
        _allMessages = ViewerStateService.AllMessages;

        if (!_allMessages.Any())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private IEnumerable<EmailMessage> CurrentMessages
    {
        get
        {
            return _allMessages
                .Where(m => m.Mailbox == _selectedMailbox)
                .OrderByDescending(m => m.Date);
        }
    }

    private async Task DownloadAttachment(EmailAttachment attachment)
    {
        var fileStream = new MemoryStream(attachment.Content);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", attachment.FileName, streamRef);
    }

}