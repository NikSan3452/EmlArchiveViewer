@page "/{User}/emails"

@using SortDirection = MudBlazor.SortDirection
@using Variant = MudBlazor.Variant
@inject ViewerStateService ViewerStateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject EmlArchiveService ArchiveService
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService
@inject EmlParserService EmlParserService

<PageTitle>Письма - @User</PageTitle>

@if (_allHeaders.Any())
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
        <MudPaper Elevation="5" style="position: relative; height: 95vh;">

            <MudOverlay Visible="@IsLoading" DarkBackground="true" Absolute="true" Style="border-radius: inherit;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
            </MudOverlay>

            <RadzenSplitter style="height: 100%;">
                <RadzenSplitterPane Size="10%" Min="150px">
                    <MudPaper Elevation="0" Class="pa-2" Style="height: 100%; padding: 10px">
                        <MudList @bind-SelectedValue="SelectedMailbox">
                            <MudListItem Value="@MailboxType.Inbox" Text="Входящие"/>
                            <MudListItem Value="@MailboxType.Sent" Text="Исходящие"/>
                        </MudList>
                    </MudPaper>
                </RadzenSplitterPane>

                <RadzenSplitterPane Size="40%" Min="300px">
                    <MudPaper Elevation="0" Style="height: 100%; padding: 10px; box-sizing: border-box;">
                        <div class="d-flex align-center pb-2" style="width: 100%;">
                            <MudText Typo="Typo.subtitle2">Всего писем: @CurrentHeaders.Count()</MudText>

                            <MudTextField @bind-Value="SearchText"
                                          Placeholder="Поиск..."
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Small"
                                          DebounceInterval="100"
                                          Clearable="true"
                                          Style="max-width: 300px; margin-left: auto;"/>
                        </div>

                        <MudTable @ref="_table"
                                  ServerData="ServerReload"
                                  SelectOnRowClick="false"
                                  FixedHeader="true"
                                  Height="calc(82vh - 4px)"
                                  Dense="true"
                                  Hover="true"
                                  MultiSelection="true"
                                  @bind-SelectedItems="_selectedHeaders"
                                  OnRowClick="@((TableRowClickEventArgs<EmailHeader> args) => OnRowClickHandler(args))"
                                  Breakpoint="Breakpoint.None"
                                  Style="cursor: pointer;">
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EmailHeader, object>(x => x.From)">Отправитель
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EmailHeader, object>(x => x.Subject)">Тема
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel InitialDirection="SortDirection.Descending"
                                                       SortBy="new Func<EmailHeader, object>(x => x.Date)">Дата
                                    </MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd Style="padding: 0; font-size: 12px;">
                                    <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true">
                                        <ActivatorContent>
                                            <div style="padding: 6px 16px; width: 100%; height: 100%;">
                                                @context.From
                                            </div>
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem OnClick="@(() => DeleteSelectedEmails())"
                                                         Disabled="@(!_selectedHeaders.Any())">Удалить
                                            </MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </MudTd>
                                <MudTd Style="padding: 0; font-size: 12px;">
                                    <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true">
                                        <ActivatorContent>
                                            <div style="padding: 6px 16px; width: 100%; height: 100%;">
                                                @context.Subject
                                            </div>
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem OnClick="@(() => DeleteSelectedEmails())"
                                                         Disabled="@(!_selectedHeaders.Any())">Удалить
                                            </MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </MudTd>
                                <MudTd Style="padding: 0; font-size: 12px; width: 130px;">
                                    <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true">
                                        <ActivatorContent>
                                            <div style="padding: 6px 16px; width: 100%; height: 100%;">
                                                @context.Date.ToString("g")
                                            </div>
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem OnClick="@(() => DeleteSelectedEmails())"
                                                         Disabled="@(!_selectedHeaders.Any())">Удалить
                                            </MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="PageSizeOptions"/>
                            </PagerContent>
                        </MudTable>
                    </MudPaper>
                </RadzenSplitterPane>

                <RadzenSplitterPane Size="50%" Min="300px">
                    <MudPaper Elevation="0"
                              Style="height: 100%; overflow-y: auto; padding: 10px; box-sizing: border-box;">
                        @if (_selectedMessage != null)
                        {
                            <MailView Message="_selectedMessage"
                                      OnDownloadAttachment="DownloadAttachment"
                                      style="height: 100%;"/>
                        }
                        else
                        {
                            <MudText Align="Align.Center" Class="pa-10">Выберите письмо для просмотра</MudText>
                        }
                    </MudPaper>
                </RadzenSplitterPane>
            </RadzenSplitter>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudText Align="Align.Center" Class="mt-16">
        Нет данных для отображения.
        <MudLink Href="/">Вернуться на главную</MudLink>
    </MudText>
}

@code {
    [Parameter] public string User { get; set; } = string.Empty;

    private MudTable<EmailHeader>? _table;
    private List<EmailHeader> _allHeaders = [];
    private string _searchText = string.Empty;
    private bool _isMessageLoading;
    private bool _isSwitchingMailbox;
    private bool _isDeleting;
    private bool IsLoading => _isMessageLoading || _isSwitchingMailbox || _isDeleting;
    private EmailMessage? _selectedMessage;
    private HashSet<EmailHeader> _selectedHeaders = [];
    private int[] PageSizeOptions { get; } = [50, 100, 300, 500];

    private string SearchText
    {
        get => _searchText;
        set
        {
            if (_searchText == value) return;
            _searchText = value;
            _table?.ReloadServerData();
        }
    }

    private MailboxType _selectedMailbox = MailboxType.Inbox;

    public MailboxType SelectedMailbox
    {
        get => _selectedMailbox;
        set => _ = SetSelectedMailboxAsync(value);
    }

    protected override void OnInitialized()
    {
        _allHeaders = ViewerStateService.AllHeaders;
        if (!_allHeaders.Any())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnRowClickHandler(TableRowClickEventArgs<EmailHeader> args)
    {
        _ = LoadFullMessageAsync(args.Item);
    }

    private async Task DeleteSelectedEmails()
    {
        if (!_selectedHeaders.Any())
            return;

        var confirmationResult = await DialogService.ShowMessageBox(
            "Подтверждение удаления",
            new MarkupString($"Вы уверены, что хотите безвозвратно удалить выбранные письма ({_selectedHeaders.Count} шт.)?"),
            "Да", cancelText: "Нет");

        if (confirmationResult != true)
        {
            return;
        }

        var filePathsToDelete = _selectedHeaders.Select(h => h.FilePath).ToList();
        _isDeleting = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            await ArchiveService.DeleteFilesAsync(filePathsToDelete);
            Snackbar.Add($"Удалено файлов: {filePathsToDelete.Count}", Severity.Success);

            var archivePath = await LocalStorage.GetItemAsync<string>("archivePath");
            if (string.IsNullOrEmpty(archivePath))
            {
                Snackbar.Add("Критическая ошибка: не удалось найти путь к архиву для обновления.", Severity.Error);
                NavigationManager.NavigateTo("/");
                return;
            }

            var (reloadedHeaders, detectedEmail) = await ArchiveService.LoadArchiveAsync(archivePath, (_, _) => { });

            ViewerStateService.AllHeaders = reloadedHeaders;
            ViewerStateService.UserEmail = detectedEmail;
            _allHeaders = reloadedHeaders;
            _selectedHeaders.Clear();
            _selectedMessage = null;

            if (_table != null) await _table.ReloadServerData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при удалении и обновлении: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isDeleting = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadFullMessageAsync(EmailHeader? header)
    {
        if (header == null)
        {
            _selectedMessage = null;
            await InvokeAsync(StateHasChanged);
            return;
        }

        _isMessageLoading = true;
        await InvokeAsync(StateHasChanged);
        _selectedMessage = await EmlParserService.ParseFullMessageAsync(header.FilePath, ViewerStateService.UserEmail);
        _isMessageLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetSelectedMailboxAsync(MailboxType mailbox)
    {
        if (_selectedMailbox == mailbox) return;
        _isSwitchingMailbox = true;
        _selectedHeaders.Clear();
        _selectedMessage = null;
        _selectedMailbox = mailbox;
        if (_table != null) await _table.ReloadServerData();
        await InvokeAsync(StateHasChanged);
        _isSwitchingMailbox = false;
        await InvokeAsync(StateHasChanged);
    }

    private Task<TableData<EmailHeader>> ServerReload(TableState state, CancellationToken token)
    {
        var data = CurrentHeaders;
        data = state.SortLabel switch
        {
            "Отправитель" => data.OrderByDirection(state.SortDirection, h => h.From),
            "Тема" => data.OrderByDirection(state.SortDirection, h => h.Subject),
            _ => data.OrderByDirection(state.SortDirection, h => h.Date)
        };
        var emailHeaders = data as EmailHeader[] ?? data.ToArray();
        var totalItems = emailHeaders.Count();
        var pagedData = emailHeaders.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        return Task.FromResult(new TableData<EmailHeader> { TotalItems = totalItems, Items = pagedData });
    }

    private IEnumerable<EmailHeader> CurrentHeaders
    {
        get
        {
            var headersByMailbox = _allHeaders.Where(h => h.Mailbox == _selectedMailbox);
            if (string.IsNullOrWhiteSpace(_searchText))
            {
                return headersByMailbox;
            }

            var normalizedSearch = NormalizeCyrillic(_searchText.Trim());
            var searchTerms = normalizedSearch?.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (searchTerms == null || searchTerms.Length == 0)
            {
                return headersByMailbox;
            }

            return headersByMailbox.Where(header =>
            {
                return searchTerms.All(term =>
                    (NormalizeCyrillic(header.From)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (NormalizeCyrillic(header.To)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (NormalizeCyrillic(header.Subject)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    header.Date.ToString("dd.MM.yyyy HH:mm").Contains(term, StringComparison.OrdinalIgnoreCase)
                );
            });
        }
    }

    private async Task DownloadAttachment(EmailAttachment attachment)
    {
        var fileStream = new MemoryStream(attachment.Content);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", attachment.FileName, streamRef);
    }

    private static string? NormalizeCyrillic(string? input)
    {
        return string.IsNullOrEmpty(input)
            ? input
            : input.Replace("ё", "е").Replace("Ё", "Е").Replace("й", "и").Replace("Й", "И");
    }

}