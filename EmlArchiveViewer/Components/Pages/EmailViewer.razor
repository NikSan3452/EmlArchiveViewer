@page "/{User}/emails"
@using SortDirection = MudBlazor.SortDirection
@using Variant = MudBlazor.Variant
@inject ViewerStateService ViewerStateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Письма - @User</PageTitle>

@if (_allMessages.Any())
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
        <MudPaper Elevation="5" style="position: relative; height: 95vh;">
            
            <MudOverlay Visible="@IsLoading" DarkBackground="true" Absolute="true" Style="border-radius: inherit;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudOverlay>

            <RadzenSplitter style="height: 100%;">
                <RadzenSplitterPane Size="10%" Min="150px">
                    <MudPaper Elevation="0" Class="pa-2" Style="height: 100%; padding: 10px">
                        <MudList @bind-SelectedValue="SelectedMailbox">
                            <MudListItem Value="@MailboxType.Inbox" Text="Входящие" />
                            <MudListItem Value="@MailboxType.Sent" Text="Исходящие" />
                        </MudList>
                    </MudPaper>
                </RadzenSplitterPane>

                <RadzenSplitterPane Size="40%" Min="300px">
                    <MudPaper Elevation="0" Style="height: 100%; padding: 10px; box-sizing: border-box;">
                        <div class="d-flex align-center pb-2" style="width: 100%;">
                            <MudText Typo="Typo.subtitle2">Всего писем: @CurrentMessages.Count()</MudText>
                            <MudTextField @bind-Value="_searchText"
                                          Placeholder="Поиск..."
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Small"
                                          Immediate="true"
                                          Clearable="true"
                                          Style="max-width: 300px; margin-left: auto;" />
                        </div>

                        <MudTable Items="CurrentMessages"
                                  FixedHeader="true"
                                  Height="calc(100% - 56px)"
                                  Dense="true"
                                  Hover="true"
                                  @bind-SelectedItem="SelectedMessage"
                                  Breakpoint="Breakpoint.None"
                                  Style="cursor: pointer;">
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EmailMessage, object>(x => x.From)">Отправитель</MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<EmailMessage, object>(x => x.Subject)">Тема</MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<EmailMessage, object>(x => x.Date)">Дата</MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Отправитель">@context.From</MudTd>
                                <MudTd DataLabel="Тема">@context.Subject</MudTd>
                                <MudTd DataLabel="Дата">@context.Date.ToString("g")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </RadzenSplitterPane>

                <RadzenSplitterPane Size="50%" Min="300px">
                    <MudPaper Elevation="0" Style="height: 100%; overflow-y: auto; padding: 10px; box-sizing: border-box;">
                        @if (_selectedMessage != null)
                        {
                            <MailView Message="_selectedMessage"
                                      OnDownloadAttachment="DownloadAttachment"
                                      style="height: 100%;" />
                        }
                        else
                        {
                            <MudText Align="Align.Center" Class="pa-10">Выберите письмо для просмотра</MudText>
                        }
                    </MudPaper>
                </RadzenSplitterPane>
            </RadzenSplitter>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudText Align="Align.Center" Class="mt-16">Нет данных для отображения.<MudLink Href="/">Вернуться на главную</MudLink>
    </MudText>
}

@code {
    [Parameter] public string User { get; set; } = string.Empty;

    private List<EmailMessage> _allMessages = [];
    private string _searchText = string.Empty;
    
    private bool _isMessageLoading;
    private bool _isSwitchingMailbox;
    private bool IsLoading => _isMessageLoading || _isSwitchingMailbox;

    private EmailMessage? _selectedMessage;
    public EmailMessage? SelectedMessage
    {
        get => _selectedMessage;
        set => _ = SetSelectedMessageAsync(value);
    }

    private MailboxType _selectedMailbox = MailboxType.Inbox;
    public MailboxType SelectedMailbox
    {
        get => _selectedMailbox;
        set => _ = SetSelectedMailboxAsync(value);
    }

    protected override void OnInitialized()
    {
        _allMessages = ViewerStateService.AllMessages;
        if (!_allMessages.Any())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SetSelectedMessageAsync(EmailMessage? message)
    {
        if (_selectedMessage == message) return;

        _isMessageLoading = true;
        _selectedMessage = message;
        await InvokeAsync(StateHasChanged);
        
        _isMessageLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetSelectedMailboxAsync(MailboxType mailbox)
    {
        if (_selectedMailbox == mailbox) return;

        _isSwitchingMailbox = true;
        _selectedMessage = null;
        _selectedMailbox = mailbox;
        await InvokeAsync(StateHasChanged);
        
        _isSwitchingMailbox = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private IEnumerable<EmailMessage> CurrentMessages
    {
        get
        {
            return _allMessages
                .Where(m => m.Mailbox == _selectedMailbox)
                .Where(Filter(_searchText));
        }
    }

    private async Task DownloadAttachment(EmailAttachment attachment)
    {
        var fileStream = new MemoryStream(attachment.Content);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", attachment.FileName, streamRef);
    }

    private static string? NormalizeCyrillic(string? input)
    {
        return string.IsNullOrEmpty(input)
            ? input
            : input.Replace("ё", "е").Replace("Ё", "Е").Replace("й", "и").Replace("Й", "И");
    }

    private static Func<EmailMessage, bool> Filter(string? searchString)
    {
        return message =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;

            var normalizedSearch = NormalizeCyrillic(searchString.Trim());
            var searchTerms = normalizedSearch?.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            if (searchTerms == null || searchTerms.Length == 0)
                return true;

            return searchTerms.All(term =>
                (NormalizeCyrillic(message.From)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (NormalizeCyrillic(message.To)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (NormalizeCyrillic(message.Subject)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (NormalizeCyrillic(message.TextBody)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (NormalizeCyrillic(message.HtmlBody)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (NormalizeCyrillic(message.Date.ToString("dd.MM.yyyy HH:mm"))?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        };
    }
}